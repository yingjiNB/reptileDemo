# -*- coding: utf-8 -*-
from typing import Dict
import subprocess  # 执行命令行的
from functools import partial  # 固定某个参数的

subprocess.Popen = partial(subprocess.Popen, encoding='utf-8')

import execjs
import requests
import json
from urllib.parse import urlencode

f = open('观鸟.js', mode='r', encoding='utf-8')
js_code = f.read()
f.close()

js = execjs.compile(js_code)
data = {
    "limit": "20",
    "page": "1",
    # "pointname": "%E7%89%8C%E5%9D%8A%E5%85%AC%E5%9B%AD"
    "pointname": "神农溪景区"
}

encode = urlencode(data)
ret = js.call("get_headers", encode)

url = "https://api.birdreport.cn/front/record/activity/search"
headers = ret["headers"]
headers[
    'User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8'
session = requests.session()
session.headers = headers

resp = session.post(url=url, data=ret['data'])
resp_json: Dict[str, any] = resp.json()
s = ''
ret_decode = js.call("pro_decode", resp_json['data'])
print(ret_decode)
